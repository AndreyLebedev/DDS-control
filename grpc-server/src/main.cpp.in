// Copyright 2019 GSI, Inc. All rights reserved.
//
//

// DDS
#include "GrpcControlServer.h"
#include "GrpcControlService.h"

// STD
#include <cstdlib>
#include <iostream>

// BOOST
#include <boost/program_options/options_description.hpp>
#include <boost/program_options/parsers.hpp>
#include <boost/program_options/variables_map.hpp>

// FairMQ SDK
#include <fairmq/sdk/DDSEnvironment.h>

using namespace std;
namespace bpo = boost::program_options;

int main(int argc, char** argv)
{
    string host;
    string rmsPlugin;
    string configFile;

    // Generic options
    bpo::options_description options("dds-control-server options");
    options.add_options()("help,h", "Produce help message");
    options.add_options()("host",
                          bpo::value<std::string>(&host)->default_value("localhost:50051"),
                          "Server address (defaul \"localhost:50051\")");
    options.add_options()("rms,r",
                          bpo::value<std::string>(&rmsPlugin)->default_value("localhost"),
                          "Defines a destination resource management system plug-in.");
    options.add_options()("config,c",
                          bpo::value<std::string>(&configFile)->default_value(""),
                          "A plug-in's configuration file. It can be used to provide additional RMS options");

    // Parsing command-line
    bpo::variables_map vm;
    bpo::store(bpo::command_line_parser(argc, argv).options(options).run(), vm);
    bpo::notify(vm);

    if (vm.count("help"))
    {
        cout << options;
        return EXIT_SUCCESS;
    }

    {
        // Equivalent to calling source DDS_env.sh
        fair::mq::sdk::DDSEnv env;
    }

    // Prepend FairMQ bin dir to the path
    auto current_path(std::getenv("PATH"));
    string new_path;
    if (current_path != nullptr)
    {
        new_path = string("@FairMQ_BINDIR@") + string(":") + string(current_path);
    }
    else
    {
        new_path = string("@FairMQ_BINDIR@");
    }
    setenv("PATH", new_path.c_str(), 1);

    odc::grpc::CGrpcControlServer server;
    server.Run(host, rmsPlugin, configFile);

    return EXIT_SUCCESS;
}
