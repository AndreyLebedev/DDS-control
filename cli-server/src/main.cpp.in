// Copyright 2019 GSI, Inc. All rights reserved.
//
//

// DDS
#include "CliControlService.h"

// STD
#include <cstdlib>
#include <iostream>

// BOOST
#include <boost/program_options/options_description.hpp>
#include <boost/program_options/parsers.hpp>
#include <boost/program_options/variables_map.hpp>

// FairMQ SDK
#include <fairmq/sdk/DDSEnvironment.h>

using namespace std;
namespace bpo = boost::program_options;

void printDescription()
{
    cout << "Sample client for DDS control." << endl
         << "Available commands:" << endl
         << ".quit - Quit the program." << endl
         << ".init - Initialization request." << endl
         << ".config - Configure run request." << endl
         << ".start - Start request." << endl
         << ".stop - Stop request." << endl
         << ".term - Terminate request." << endl
         << ".down - Shutdown request." << endl
         << ".update - Update topology request." << endl;
}

int main(int argc, char** argv)
{
    string rmsPlugin;
    string configFile;
    string topologyFile;
    string updatedTopologyFile;

    // Generic options
    bpo::options_description options("odc-cli-server options");
    options.add_options()("help,h", "Produce help message");
    options.add_options()("rms,r",
                          bpo::value<std::string>(&rmsPlugin)->default_value("localhost"),
                          "Defines a destination resource management system plug-in.");
    options.add_options()("config,c",
                          bpo::value<std::string>(&configFile)->default_value(""),
                          "A plug-in's configuration file. It can be used to provide additional RMS options.");
    string defaultTopo("@FairMQ_DATADIR@/ex-dds-topology-infinite.xml");
    options.add_options()("topo",
                          bpo::value<std::string>(&topologyFile)->default_value(defaultTopo),
                          (string("Topology filepath (default ") + defaultTopo + string(")")).c_str());
    options.add_options()("utopo",
                          bpo::value<std::string>(&updatedTopologyFile)->default_value(defaultTopo),
                          (string("Updated topology filepath (default ") + defaultTopo + string(")")).c_str());

    // Parsing command-line
    bpo::variables_map vm;
    bpo::store(bpo::command_line_parser(argc, argv).options(options).run(), vm);
    bpo::notify(vm);

    if (vm.count("help"))
    {
        cout << options;
        return EXIT_SUCCESS;
    }

    {
        // Equivalent to calling source DDS_env.sh
        fair::mq::sdk::DDSEnv env;
    }

    // Prepend FairMQ bin dir to the path
    auto current_path(std::getenv("PATH"));
    string new_path;
    if (current_path != nullptr)
    {
        new_path = string("@FairMQ_BINDIR@") + string(":") + string(current_path);
    }
    else
    {
        new_path = string("@FairMQ_BINDIR@");
    }
    setenv("PATH", new_path.c_str(), 1);

    odc::cli::CCliControlService control;

    // TODO: FIXME: Think of a better design on how to avoid code dublication.
    printDescription();

    while (true)
    {
        string cmd;
        cout << "Please enter command: ";
        getline(std::cin, cmd);

        if (cmd.empty())
        {
        }
        else if (cmd == ".quit")
        {
            return EXIT_SUCCESS;
        }
        else if (cmd == ".init")
        {
            cout << "Sending initialization request..." << endl;
            control.Initialize(rmsPlugin, configFile, topologyFile);
        }
        else if (cmd == ".config")
        {
            cout << "Sending configure run request..." << endl;
            control.ConfigureRun();
        }
        else if (cmd == ".start")
        {
            cout << "Sending start request..." << endl;
            control.Start();
        }
        else if (cmd == ".stop")
        {
            cout << "Sending stop request..." << endl;
            control.Stop();
        }
        else if (cmd == ".term")
        {
            cout << "Sending terminate request..." << endl;
            control.Terminate();
        }
        else if (cmd == ".down")
        {
            cout << "Sending shutdown request..." << endl;
            control.Shutdown();
        }
        else if (cmd == ".update")
        {
            cout << "Sending update topology request..." << endl;
            control.UpdateTopology(updatedTopologyFile);
        }
        else
        {
            cout << "Unknown command " << cmd << endl;
        }
    }

    return EXIT_SUCCESS;
}
